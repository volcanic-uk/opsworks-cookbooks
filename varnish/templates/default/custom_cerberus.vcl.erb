

sub vcl_recv {
    # send all requests to our backend round-robin (brr)
    # if (req.http.host == "www.twentyrecruitment.com" || req.http.host == "www.barkerross.co.uk" || req.http.host == "www.montash.com" || req.http.host == "www.jobcoconut.com" || req.http.host == "www.macgregorblack.com" || req.http.host == "careers.autorestore.co.uk" || req.http.host == "www.cmcconsulting.co.uk" || req.http.host == "www.huntercharles.de" || req.http.host == "www.hshcr.com" || req.http.host == "www.montashreviews.com" || req.http.host == "www.propelexecutive.com" || req.http.host == "www.careertrotter.de" || req.http.host == "www.achievegroup.com.my" || req.http.host == "www.achievegroup.com.hk" || req.http.host == "www.achievegroup.asia" || req.http.host == "www.venquis.de" || req.http.host == "www.fleximums.com" || req.http.host == "www.talentfm.co.uk" || req.http.host == "www.monarchdigital.co.uk" || req.http.host == "www.therecruitmentsolution.co.uk" || req.http.host == "templates.volcanic.uk"){
    #     set req.backend_hint = brr.backend();
    #     set req.http.X-High-Performance = "false";
    # } else {
        # set req.backend_hint = hp_brr.backend();
        # set req.http.X-High-Performance = "true";
    # }

    set req.backend_hint = hp_brr.backend();
    set req.http.X-High-Performance = "true";

    # store requested url for returning later
    set req.http.X-Varnish-Url = req.url;

    set req.http.X-Forwarded-Proto = req.http.CloudFront-Forwarded-Proto;

    if (req.method == "BAN") {
        ban("req.http.host == " + req.http.host);
        # Throw a synthetic page so the request won't go to the backend.
        return(synth(200, "Ban added"));
    }

    # pass anything that isnt a get or head
    if (req.method != "GET" && req.method != "HEAD"){
        return(pass);
    }

    # decide if request can look in cache
    # bit at the beginning permits locales
    if ((req.url ~ "job-search" || req.url ~ "job") && (req.http.User-Agent ~ "bot" || req.http.User-Agent ~ "Googlebot" || req.http.User-Agent ~ "bingbot" || req.http.User-Agent ~ "spider")) {
        # set req.backend_hint = search_brr.backend();
        unset req.http.Cookie;
        return(hash);
    } elsif (req.url ~ "^\/([a-zA-Z\-]{0,5}\/)?(admin|users|recruiter|dashboard|consultant(?!s)|job-search|api|sa\/|super_admins)" || req.url ~ ".*\/job.*apply\/?" || req.url ~ ".*\/job.*save_job\/?" || req.url ~ ".*\/job.*unsave_job\/?"){
        return(pass);
    } elsif (req.http.Cookie ~ "_user_logged_in") {
        return(pass);
    } else {
        # trash the cookies
        unset req.http.Cookie;
        return(hash);
    }
}

sub vcl_hash {
    hash_data(req.http.CloudFront-Forwarded-Proto);
}

sub vcl_hit {
    set req.http.X-Varnish-Cache = "hit";

    if (obj.ttl >= 0s) {
        # A pure unadulterated hit, deliver it
        return (deliver);
    }

    # deliver for bots regardless of age
    if (req.http.User-Agent ~ "bot" || req.http.User-Agent ~ "Googlebot" || req.http.User-Agent ~ "bingbot" || req.http.User-Agent ~ "spider") {
        return (deliver);
    }


    if (obj.ttl + obj.grace > 0s) {
        # Object is in grace, deliver it
        # Automatically triggers a background fetch
        return (deliver);
    }
    # fetch & deliver once we get the result
    return (fetch);
}

sub vcl_miss {
    set req.http.X-Varnish-Cache = "miss";
}

sub vcl_pass {
    set req.http.X-Varnish-Cache = "pass";
}

sub vcl_backend_fetch {
    # if (bereq.retries > 0) {
    #     set bereq.backend = brr.backend();
    # }
    # set beresp.http.X-Backend = beresp.backend.name;
}

sub vcl_backend_response {

    if (beresp.status >= 500) {
       # the failing backend is blacklisted and we try to fetch content from another server
       saintmode.blacklist(5s);
       return (retry);
    }

    if (beresp.http.X-Do-Not-Cache == "true" || bereq.url ~ "^\/users\/auth\/[a-z_-]*\/callback" || bereq.http.X-Varnish-Cache == "pass" || beresp.http.Content-Type ~ "json" || beresp.http.Content-Type ~ "xml" || beresp.status == 429 || beresp.status == 403) {
        set beresp.uncacheable = true;
    } else {
        unset beresp.http.Set-Cookie;
        unset beresp.http.Cookie;
        set beresp.http.Cache-Control = "public";
        set beresp.ttl = 7200s; # 2h in cache 
        set beresp.grace = 864000s; # 10 days grace period
    }
    



    

    # debugging messages
    if (beresp.http.Cookie ~ "(_user_logged_in|_session)") {
        set beresp.http.X-Cacheable = "NO:Got Session";
        set beresp.uncacheable = true;
        return (deliver);

    } elsif (beresp.ttl <= 0s) {
        # Varnish determined the object was not cacheable
        set beresp.http.X-Cacheable = "NO:Not Cacheable";

    } elsif (beresp.http.set-cookie) {
        # You don't wish to cache content for logged in users
        set beresp.http.X-Cacheable = "NO:Set-Cookie";
        set beresp.uncacheable = true;
        return (deliver);

    } elsif (beresp.http.Cache-Control ~ "private") {
        # You are respecting the Cache-Control=private header from the backend
        set beresp.http.X-Cacheable = "NO:Cache-Control=private";
        set beresp.uncacheable = true;
        return (deliver);

    } else {
        # Varnish determined the object was cacheable
        set beresp.http.X-Cacheable = "YES";
    }

    
    # Compress response if not compressed
    if (beresp.http.content-type ~ "text") {
        set beresp.do_gzip = true;
    }

    set beresp.http.X-Varnish-Retries = bereq.retries;
    
}

sub vcl_backend_error {
    if (bereq.retries < 4){
        return (retry);
    }

    include "error_page.vcl";
    return (deliver);
}

sub vcl_deliver {
    if (!resp.http.Content-Type) {
        set resp.http.Content-Type = "text/html; charset=utf-8";
    }
    set resp.http.X-Varnish-Cache = req.http.X-Varnish-Cache;
    set resp.http.X-Varnish-Url = req.http.X-Varnish-Url;
    set resp.http.Cache-Control = "private, no-cache";
    set resp.http.X-CF-Passed-Proto = req.http.CloudFront-Forwarded-Proto;
    set resp.http.X-High-Performance = req.http.X-High-Performance;
    unset resp.http.X-Powered-By;
    unset resp.http.Server;
}
